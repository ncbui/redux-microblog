Component Hierarchy 

Index  (redux - initialize store)
    App
        Navbar/Header
        Routes 
            Homepage 
                PostList     (redux - getState)
            NewPost          (redux - dispatch)
                PostForm(new) 
            BlogPost         (redux - dispatch)
                CommentList 
                CommentForm
                PostDisplay 
                PostForm(edit)

Store
{
    posts: {
        id: {
            title, 
            description, 
            body     
    },
    comments: {
        postID: {
            commentID: {body: "hello},
            commentID: {body: "nice work"},
            commentID: {body: "wowza"},
            commentID: {body: "¯\_(ツ)_/¯"}
        },
        postID: {
            commentID: {body: "hello"},
            commentID: {body: "nice work"},
            commentID: {body: "wowza"},
            commentID: {body: "¯\_(ツ)_/¯"}
        }
    }
}
              
TODOS:
x research about combined reducers
x make and export all actions with actionCreator
x ensure actionCreator can be import wherever we want to dispatch
x added <Provider> to index.js
x dispatch from newPost and blogPost
x PostList: get state from store, generate list of titles
- newPost, blogPost: import uuid, add a id to each post/comment before calling action

LATER TODOS:
- add an action type for loading posts/comments



Form:pull header-text as a prop ;  input title, description, body. 
Fill out with existing values if existing,



Question: 
- when using reactstrap form input blocks, should we still use htmlFor instead of for 
_Component Hierarchy_

Index  (redux - initialize store)
    App
        Navbar/Header
        Routes 
            Homepage 
                PostList     (redux - selector)
            NewPost          (redux - dispatch)
                PostForm(new) 
            BlogPost         (redux - selector, dispatch)
                CommentList 
                CommentForm
                PostDisplay 
                PostForm(edit)

_Redux Store_
{
    posts: {
        id: {
            title, 
            description, 
            body,
            id,
            comments   
    },
    titles: {
        id: {id, title, description},
        id: {id, title, description},
    ...}
}

_Redux Store after Backend Integration_
 - Re-use data for posts that users have viewed
 - Everytime a user accesses a post, we add to posts + titles obj

              
TODOS:
x research about combined reducers
x make and export all actions with actionCreator
x ensure actionCreator can be import wherever we want to dispatch
x added <Provider> to index.js
x dispatch from newPost and blogPost
x PostList: get state from store, generate list of titles
x forms create uuid, adds to data, send to parents (newPost, blogPost)
x adding and editing of posts functionality
x delete post
x display comments for each post
x add comments from post
x delete comments from post
x blogPost handleDeleteComment(): 
    x pushed to history to get re-render, 
    x but find out why component doesn't re-render once state changes. did we mutate state somewhere instead of copying
x removed references to starter blog from react App
- TODOS from CODEREVIEW Added

x When Backend added, remove references to starter blog from redux
x setup backend (see download)
x create database, fill with seed data
x update index.js with redux-thunk and redux-devtools-extension,
x set isLoading state in redux store (accessible by components and thunks)
~ extend actionCreator.js to include API thunk
x make API to load info for PostList
x for each blogpost, 
    x make API to receive full details and display
    x add full and short details to redux store
- adding, editing, deleting post & comments updates backend (api request)
x add an action type for loading posts/comments
x pull header-text as a prop ;  input title, description, body. Fill out with existing values if existing,


LATER TODOS:

BUG STORY:
- loading BlogPost, stuck with isLoading:true, hints: devtools reveal an action running 3 times
- are you really comparing the same types; string vs integer


Example dispatches

  store.dispatch(addPost(1, { title: "new post" }))

  store.dispatch(addPost(2, { title: "new post2" }))

  store.dispatch(addComment(1, 1, { body: "new comment" }))

  store.dispatch(addComment(1, 2, { body: "new comment2" }))

  store.dispatch(deleteComment(1,1))

  store.dispatch(deletePost(1))

  store.dispatch(editPost(1, { title: "EDITED TITLE" }))
_Component Hierarchy_

Index  (redux - initialize store)
    App
        Navbar/Header
        Routes 
            Homepage 
                PostList     (redux - selector)
            NewPost          (redux - dispatch)
                PostForm(new) 
            BlogPost         (redux - selector, dispatch)
                CommentList 
                CommentForm
                PostDisplay 
                PostForm(edit)

_Store_

{
    posts: {
        id: {
            title, 
            description, 
            body     
    },
    comments: {
        postID: {
            commentID: {body},
            commentID: {body},
            },
        postID: { }
    }
}
              
TODOS:
x research about combined reducers
x make and export all actions with actionCreator
x ensure actionCreator can be import wherever we want to dispatch
x added <Provider> to index.js
x dispatch from newPost and blogPost
x PostList: get state from store, generate list of titles
x forms create uuid, adds to data, send to parents (newPost, blogPost)
x adding and editing of posts functionality
x delete post
x display comments for each post
x add comments from post
x delete comments from post
x blogPost handleDeleteComment(): 
    - pushed to history to get re-render, 
    - but find out why component doesn't re-render once state changes. did we mutate state somewhere instead of copying
x removed references to starter blog from react App
- TODOS from CODEREVIEW Added


- setup backend (see download)
- create database, fill with seed data
- make API to load info for PostList
- for each blogpost, make API to receive full details
- adding, editing, deleting updates backend


LATER TODOS:
- add an action type for loading posts/comments
- When Backend added, remove references to starter blog from redux



Form: pull header-text as a prop ;  input title, description, body. 
Fill out with existing values if existing,



Question: 
- when using reactstrap form input blocks, should we still use htmlFor instead of for 


Example dispatches

  store.dispatch(addPost(1, { title: "new post" }))

  store.dispatch(addPost(2, { title: "new post2" }))

  store.dispatch(addComment(1, 1, { body: "new comment" }))

  store.dispatch(addComment(1, 2, { body: "new comment2" }))

  store.dispatch(deleteComment(1,1))

  store.dispatch(deletePost(1))

  store.dispatch(editPost(1, { title: "EDITED TITLE" }))